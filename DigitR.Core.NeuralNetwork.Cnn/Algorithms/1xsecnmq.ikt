using System;
using System.Collections.Generic;
using System.Diagnostics.Contracts;
using System.Linq;

using DigitR.Core.NeuralNetwork.Algorithms;
using DigitR.Core.NeuralNetwork.Cnn.Primitives;

namespace DigitR.Core.NeuralNetwork.Cnn.Algorithms
{
    public class ForwardOutputAlgorithm : IOutputAlgorithm<double, CnnConnection>
    {
        private const int a = 0;

        private readonly IActivationAlgorithm<double, double> activationAlgorithm;

        public ForwardOutputAlgorithm(
            IActivationAlgorithm<double, double> activationAlgorithm)
        {
            Contract.Requires<ArgumentNullException>(activationAlgorithm != null);

            this.activationAlgorithm = activationAlgorithm;
        }

        /// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        public double Calculate(IReadOnlyCollection<CnnConnection> inputConnections)
        {
            double inducedLocalArea = inputConnections
                .Sum(connection => connection.Weight.Value * connection.Neuron.Output);

            double activationValue = 
        }
    }
}
